#ifndef MESSAGE_H_
#define MESSAGE_H_

#include <cstdint>
#include <iostream>

namespace msg {

const uint32_t kDataMessageType = 1;
const uint32_t kAckMessageType = 2;
const uint32_t kSeqMessageType = 3;
const uint32_t kSeqAckMessageType = 4;

// ByzantineMessage is the wire format of a standard data message used in the
// ISIS Total Order Multicast Algorithm. The message is initially created by a
// process before it communicates with all other processes to determine a
// sequence number.
struct DataMessage {
  uint32_t type;    // must be equal to 1
  uint32_t sender;  // the senderâ€™s id
  uint32_t msg_id;  // the identifier of the message generated by the sender
  uint32_t data;    // a dummy integer
};

// AckMessage is the wire format of an acknowledgement message used to respond
// to DataMessages to provided reliable communication. In addition to indicating
// the reception of a DataMessage, the message also contains information about
// the proposed sequence number for the DataMessage by the receiver of that
// DataMessage.
struct AckMessage {
  uint32_t type;    // must be equal to 2
  uint32_t sender;  // the sender of the DataMessage
  uint32_t msg_id;  // the identifier of the DataMessage generated by the sender
  uint32_t proposed_seq;  // the proposed sequence number
  uint32_t proposer;      // the process id of the proposer
};

// SeqMessage is the wire format of an sequence message used to communicate a
// final sequence number for a previously proposed DataMessage.
struct SeqMessage {
  uint32_t type;    // must be equal to 3
  uint32_t sender;  // the sender of the DataMessage
  uint32_t msg_id;  // the identifier of the DataMessage generated by the sender
  uint32_t final_seq;  // the final sequence number selected by the sender
  uint32_t final_seq_proposer;  // the process id of the proposer who proposed
                                // the final_seq
};

// SeqAckMessage is the wire format of an acknowledgement message used for
// SeqMessage messages to provided reliable communication.
struct SeqAckMessage {
  uint32_t type;    // must be equal to 4
  uint32_t sender;  // the sender of the DataMessage
  uint32_t msg_id;  // the identifier of the DataMessage generated by the sender
};

// ostream formatting functions for each message type.
std::ostream& operator<<(std::ostream& o, const DataMessage& data_msg);
std::ostream& operator<<(std::ostream& o, const AckMessage& ack_msg);
std::ostream& operator<<(std::ostream& o, const SeqMessage& seq_msg);
std::ostream& operator<<(std::ostream& o, const SeqAckMessage& seq_msg);

}  // namespace msg

#endif
